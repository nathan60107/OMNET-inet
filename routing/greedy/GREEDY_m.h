//
// Generated file, do not edit! Created by nedtool 5.0 from inet/routing/greedy/GREEDY.msg.
//

#ifndef __INET_GREEDY_M_H
#define __INET_GREEDY_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
#include "inet/common/geometry/common/Coord.h"
#include "inet/common/TLVOption.h"
#include "inet/networklayer/common/L3Address.h"
#include "inet/routing/greedy/GREEDYDefs.h"
// }}


namespace inet {

/**
 * Class generated from <tt>inet/routing/greedy/GREEDY.msg:41</tt> by nedtool.
 * <pre>
 * //
 * // The GREEDY beacon packet is sent periodically by all GREEDY routers to notify
 * // the neighbors about the router's address and position.
 * //
 * packet GREEDYBeacon
 * {
 *     L3Address address;
 *     Coord position;
 * }
 * </pre>
 */
class GREEDYBeacon : public ::omnetpp::cPacket
{
  protected:
    L3Address address;
    Coord position;

  private:
    void copy(const GREEDYBeacon& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GREEDYBeacon&);

  public:
    GREEDYBeacon(const char *name=nullptr, int kind=0);
    GREEDYBeacon(const GREEDYBeacon& other);
    virtual ~GREEDYBeacon();
    GREEDYBeacon& operator=(const GREEDYBeacon& other);
    virtual GREEDYBeacon *dup() const {return new GREEDYBeacon(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual L3Address& getAddress();
    virtual const L3Address& getAddress() const {return const_cast<GREEDYBeacon*>(this)->getAddress();}
    virtual void setAddress(const L3Address& address);
    virtual Coord& getPosition();
    virtual const Coord& getPosition() const {return const_cast<GREEDYBeacon*>(this)->getPosition();}
    virtual void setPosition(const Coord& position);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const GREEDYBeacon& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, GREEDYBeacon& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/routing/greedy/GREEDY.msg:52</tt> by nedtool.
 * <pre>
 * //
 * // The GREEDYOption is used to add extra routing information for network datagrams.
 * //
 * // For more information, see the GREEDY paper
 * // http://www.eecs.harvard.edu/~htk/publication/2000-mobi-karp-kung.pdf
 * //
 * class GREEDYOption extends TLVOptionBase
 * {
 *     GREEDYForwardingMode routingMode = (GREEDYForwardingMode)-1;
 *     Coord destinationPosition;               // D
 *     Coord perimeterRoutingStartPosition;     // Lp
 *     Coord perimeterRoutingForwardPosition;   // Lf
 *     L3Address currentFaceFirstSenderAddress;   // e0
 *     L3Address currentFaceFirstReceiverAddress; // e0
 *     L3Address senderAddress; // TODO: this field is not strictly needed by GREEDY (should be eliminated)
 * }
 * </pre>
 */
class GREEDYOption : public ::inet::TLVOptionBase
{
  protected:
    GREEDYForwardingMode routingMode;
    Coord destinationPosition;
    Coord perimeterRoutingStartPosition;
    Coord perimeterRoutingForwardPosition;
    L3Address currentFaceFirstSenderAddress;
    L3Address currentFaceFirstReceiverAddress;
    L3Address senderAddress;

  private:
    void copy(const GREEDYOption& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GREEDYOption&);

  public:
    GREEDYOption();
    GREEDYOption(const GREEDYOption& other);
    virtual ~GREEDYOption();
    GREEDYOption& operator=(const GREEDYOption& other);
    virtual GREEDYOption *dup() const {return new GREEDYOption(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual GREEDYForwardingMode& getRoutingMode();
    virtual const GREEDYForwardingMode& getRoutingMode() const {return const_cast<GREEDYOption*>(this)->getRoutingMode();}
    virtual void setRoutingMode(const GREEDYForwardingMode& routingMode);
    virtual Coord& getDestinationPosition();
    virtual const Coord& getDestinationPosition() const {return const_cast<GREEDYOption*>(this)->getDestinationPosition();}
    virtual void setDestinationPosition(const Coord& destinationPosition);
    virtual Coord& getPerimeterRoutingStartPosition();
    virtual const Coord& getPerimeterRoutingStartPosition() const {return const_cast<GREEDYOption*>(this)->getPerimeterRoutingStartPosition();}
    virtual void setPerimeterRoutingStartPosition(const Coord& perimeterRoutingStartPosition);
    virtual Coord& getPerimeterRoutingForwardPosition();
    virtual const Coord& getPerimeterRoutingForwardPosition() const {return const_cast<GREEDYOption*>(this)->getPerimeterRoutingForwardPosition();}
    virtual void setPerimeterRoutingForwardPosition(const Coord& perimeterRoutingForwardPosition);
    virtual L3Address& getCurrentFaceFirstSenderAddress();
    virtual const L3Address& getCurrentFaceFirstSenderAddress() const {return const_cast<GREEDYOption*>(this)->getCurrentFaceFirstSenderAddress();}
    virtual void setCurrentFaceFirstSenderAddress(const L3Address& currentFaceFirstSenderAddress);
    virtual L3Address& getCurrentFaceFirstReceiverAddress();
    virtual const L3Address& getCurrentFaceFirstReceiverAddress() const {return const_cast<GREEDYOption*>(this)->getCurrentFaceFirstReceiverAddress();}
    virtual void setCurrentFaceFirstReceiverAddress(const L3Address& currentFaceFirstReceiverAddress);
    virtual L3Address& getSenderAddress();
    virtual const L3Address& getSenderAddress() const {return const_cast<GREEDYOption*>(this)->getSenderAddress();}
    virtual void setSenderAddress(const L3Address& senderAddress);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const GREEDYOption& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, GREEDYOption& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_GREEDY_M_H

